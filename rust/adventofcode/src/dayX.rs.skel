#[allow(unused_imports)]
use anyhow::{anyhow, Result};
use clap::Parser;

#[allow(unused_imports)]
use itertools::Itertools;

#[allow(unused_imports)]
use crate::{input, Command};

#[derive(Debug, Parser)]
pub enum Args {
    Part1,
    Part2,
}

impl Command for Args {
    fn execute(&self) -> Result<String> {
        match self {
            Self::Part1 => part_one(),
            Self::Part2 => part_two(),
        }
    }
}

fn part_one() -> Result<String> {
    Ok("".to_string())
}

fn part_two() -> Result<String> {
    Ok("".to_string())
}

#[cfg(test)]
mod test {
    use super::*;
    use tracing_test::traced_test;

    const TEST_INPUT: &str = "";

    #[traced_test]
    #[test]
    fn test_part_one() -> Result<()> {
        Ok(())
    }

    #[traced_test]
    #[test]
    fn test_part_two() -> Result<()> {
        Ok(())
    }
}

